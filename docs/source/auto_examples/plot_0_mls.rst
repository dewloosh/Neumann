
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\plot_0_mls.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_0_mls.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_0_mls.py:


Moving Least Squares Method
===========================

Approximation over precalculated data using the MLS method.

.. GENERATED FROM PYTHON SOURCE LINES 9-31

.. code-block:: python3

    import numpy as np

    from neumann.approx.mls import moving_least_squares
    from neumann.approx.func import CubicWeightFunction

    data = np.loadtxt('testdata.out')

    print(data.shape)

    w = CubicWeightFunction([0., 0.], [0.5, 0.5])
    approx = moving_least_squares(data[:, 0:2], data[:, 2:], deg=2, order=1, w=w)

    n = 20  # number of sampling points per coordinate
    X = np.linspace(0, 1, n)
    Y = np.linspace(0, 1, n)
    X, Y = np.meshgrid(X, Y)
    Z = np.zeros([4, n, n])
    for i in range(n):
        for j in range(n):
            f, *_ = approx([X[i, j], Y[i, j]])
            Z[:, i, j] = f





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (102, 6)




.. GENERATED FROM PYTHON SOURCE LINES 32-65

.. code-block:: python3

    from matplotlib import pyplot as plt
    from matplotlib import cm

    fig = plt.figure()
    ax1 = fig.add_subplot(221, projection='3d')
    ax2 = fig.add_subplot(222, projection='3d')
    ax3 = fig.add_subplot(223, projection='3d')
    ax4 = fig.add_subplot(224, projection='3d')

    ax1.plot_surface(X, Y, Z[0, ::], cmap=cm.coolwarm,
                     linewidth=0, antialiased=False)
    ax2.plot_surface(X, Y, Z[1, ::], cmap=cm.coolwarm,
                     linewidth=0, antialiased=False)
    ax3.plot_surface(X, Y, Z[2, ::], cmap=cm.coolwarm,
                     linewidth=0, antialiased=False)
    ax4.plot_surface(X, Y, Z[3, ::], cmap=cm.coolwarm,
                     linewidth=0, antialiased=False)

    ax1.set_xlabel('a')
    ax1.set_ylabel('b')
    ax1.set_zlabel('$A_{11}$')
    ax2.set_xlabel('a')
    ax2.set_ylabel('b')
    ax2.set_zlabel('$A_{22}$')
    ax3.set_xlabel('a')
    ax3.set_ylabel('b')
    ax3.set_zlabel('$A_{12}$')
    ax4.set_xlabel('a')
    ax4.set_ylabel('b')
    ax4.set_zlabel('$A_{66}$')
    plt.show()





.. image-sg:: /auto_examples/images/sphx_glr_plot_0_mls_001.png
   :alt: plot 0 mls
   :srcset: /auto_examples/images/sphx_glr_plot_0_mls_001.png, /auto_examples/images/sphx_glr_plot_0_mls_001_2_0x.png 2.0x
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  15.690 seconds)

**Estimated memory usage:**  61 MB


.. _sphx_glr_download_auto_examples_plot_0_mls.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_0_mls.py <plot_0_mls.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_0_mls.ipynb <plot_0_mls.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
